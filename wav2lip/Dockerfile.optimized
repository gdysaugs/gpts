# 最適化版Dockerfile - べ、別にあなたのためにキャッシュ最適化してあげるわけじゃないんだからね！
FROM nvcr.io/nvidia/pytorch:24.01-py3

# 環境変数設定
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONPATH=/app
ENV CUDA_VISIBLE_DEVICES=0
ENV PIP_NO_CACHE_DIR=1
# headless環境設定（べ、別にあなたのためじゃないんだからね！）
ENV QT_QPA_PLATFORM=offscreen
ENV DISPLAY=:99
ENV MPLBACKEND=Agg

# ========== STAGE 1: システム依存関係（ほぼ変更なし） ==========
RUN apt-get update && apt-get install -y \
    ffmpeg \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libglib2.0-0 \
    libgl1-mesa-glx \
    git \
    wget \
    build-essential \
    libopenblas-dev \
    liblapack-dev \
    libx11-dev \
    libgtk-3-dev \
    pkg-config \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libtbb-dev \
    libeigen3-dev \
    libdc1394-dev \
    libxss1 \
    python3-dev \
    xvfb \
    x11-utils \
    && rm -rf /var/lib/apt/lists/*

# CMakeアップデート
RUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null && \
    echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ jammy main' | tee /etc/apt/sources.list.d/kitware.list >/dev/null && \
    apt-get update && \
    apt-get install -y cmake && \
    rm -rf /var/lib/apt/lists/*

# ========== STAGE 2: 基本Python依存関係（あまり変更なし） ==========
RUN pip install --no-cache-dir \
    numpy==1.26.1 \
    scipy==1.11.3

RUN pip install --no-cache-dir opencv-python==4.5.5.64

# ========== STAGE 3: 重いPyTorch（変更なし） ==========
RUN pip install --no-cache-dir \
    torch==2.1.0 \
    torchvision==0.16.0 \
    torchaudio==2.1.0

# ========== STAGE 4: 音声・動画処理（変更なし） ==========
RUN pip install --no-cache-dir \
    librosa==0.10.1 \
    moviepy==1.0.3 \
    imageio-ffmpeg==0.4.9

# ========== STAGE 5: dlibビルド（時間かかるけど変更なし） ==========
ENV CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DDLIB_NO_GUI_SUPPORT=ON -DDLIB_USE_CUDA=OFF -DCMAKE_POLICY_VERSION_MINIMUM=3.5"
RUN pip install --no-cache-dir dlib==19.22.1 || \
    pip install --no-cache-dir --no-binary=dlib dlib==19.22.1 || \
    pip install --no-cache-dir face-recognition || \
    (wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \
     bash Miniconda3-latest-Linux-x86_64.sh -b -p /opt/conda && \
     export PATH="/opt/conda/bin:$PATH" && \
     /opt/conda/bin/conda install -c conda-forge dlib -y && \
     rm Miniconda3-latest-Linux-x86_64.sh)

ENV PATH="/opt/conda/bin:$PATH"

# ========== STAGE 6: 他の依存関係（変更少ない） ==========
RUN pip install --no-cache-dir \
    --no-deps batch-face==1.4.0 \
    gdown==4.7.1

RUN pip install --no-cache-dir \
    basicsr==1.4.2 \
    facexlib==0.3.0 \
    gfpgan==1.3.8 \
    importlib-metadata==6.8.0 \
    ipython==8.16.1

RUN pip install --no-cache-dir \
    click \
    rich \
    loguru \
    tqdm \
    pyyaml \
    ultralytics

# ========== STAGE 6.5: FastAPI Web Server（新追加） ==========
RUN pip install --no-cache-dir \
    fastapi>=0.104.0 \
    uvicorn[standard]>=0.24.0 \
    python-multipart>=0.0.6 \
    aiofiles>=23.0.0 \
    starlette>=0.27.0 \
    requests>=2.31.0 \
    psutil>=5.9.0

# ========== STAGE 6.6: TensorRT究極最適化依存関係（べ、別に究極化してあげるわけじゃないけど！💕） ==========
RUN pip install --no-cache-dir \
    pycuda \
    onnxruntime-gpu>=1.16.0 \
    omegaconf

# OpenCV再インストール
RUN pip install --force-reinstall --no-deps opencv-python==4.5.5.64

# ========== STAGE 7: アプリケーション（頻繁に変更） ==========
WORKDIR /app

# ディレクトリ作成（構造だけ先に作成）
RUN mkdir -p /app/{input,output,logs,models,scripts,config}

# requirements.txtを先にコピー（依存関係に変更がなければキャッシュ使用）
COPY requirements*.txt /app/
# 追加の依存関係があれば（なければスキップ）
# RUN pip install -r requirements.txt || true

# 最後にアプリケーションコード（最も頻繁に変更される）
COPY . /app/

# ========== STAGE 8: 検証（PyCUDAは実行時テスト） ==========
RUN python -c "import torch; print('CUDA available:', torch.cuda.is_available())"
RUN python -c "import cv2; print('OpenCV version:', cv2.__version__)"
RUN python -c "import dlib; print('dlib imported successfully!')"
RUN python -c "import fastapi; print('FastAPI version:', fastapi.__version__)"
RUN python -c "import tensorrt; print('TensorRT version:', tensorrt.__version__)"
RUN python -c "import onnxruntime; print('ONNX Runtime providers:', onnxruntime.get_available_providers())"
# PyCUDAは実行時にGPUアクセス付きでテストする

# ポート公開
EXPOSE 8002

# デフォルト実行コマンド (FastAPI server)
CMD ["python", "fastapi_wav2lip_server.py"]