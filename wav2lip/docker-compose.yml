version: '3.8'

services:
  wav2lip-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    image: wav2lip-yolo:v1
    container_name: wav2lip-production
    
    # GPU設定 (WSL2最適化)
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    
    # WSL2 GPU専用設定
    privileged: true
    volumes:
      - /usr/lib/wsl:/usr/lib/wsl:ro
      - ./input:/app/input
      - ./output:/app/output
      - ./config:/app/config
      - ./logs:/app/logs
      - ./models:/app/models
    
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - CUDA_VISIBLE_DEVICES=0
      - LD_LIBRARY_PATH=/usr/lib/wsl/lib
      - PYTHONPATH=/app
      - TENSORRT_OPTIMIZE=false  # 初期は無効
      - TSUNDERE_MODE=true       # ツンデレモード有効！
    
    # 共有メモリ設定 (PyTorch並列処理用)
    shm_size: 2gb
    
    # ポート公開 (API使用時)
    ports:
      - "8002:8000"  # GPT-SoVITSと競合回避
    
    # リソース制限
    mem_limit: 16g
    memswap_limit: 16g
    
    # 再起動ポリシー
    restart: unless-stopped
    
    # ヘルスチェック
    healthcheck:
      test: ["CMD", "python", "-c", "import torch; assert torch.cuda.is_available()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # ネットワーク設定
    networks:
      - wav2lip-network

  # 開発用サービス (オプション)
  wav2lip-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: dependencies  # 開発用は依存関係のみ
    image: wav2lip-dev:v1
    container_name: wav2lip-development
    
    privileged: true
    volumes:
      - /usr/lib/wsl:/usr/lib/wsl:ro
      - .:/app  # ソースコード直接マウント
    
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - CUDA_VISIBLE_DEVICES=0
      - LD_LIBRARY_PATH=/usr/lib/wsl/lib
      - PYTHONPATH=/app
      - DEVELOPMENT_MODE=true
    
    shm_size: 2gb
    
    command: /bin/bash
    stdin_open: true
    tty: true
    
    networks:
      - wav2lip-network
    
    profiles:
      - dev  # docker-compose --profile dev up で起動

networks:
  wav2lip-network:
    driver: bridge

# 永続化ボリューム (必要に応じて)
volumes:
  wav2lip-models:
    driver: local
  wav2lip-cache:
    driver: local